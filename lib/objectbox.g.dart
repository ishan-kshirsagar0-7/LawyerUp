// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/models/chat_model.dart';
import 'core/models/conversation_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 2719145780885021637),
      name: 'ConversationModel',
      lastPropertyId: const obx_int.IdUid(5, 4957151726265517651),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7889168172028800731),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7848099881535082912),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4197411554491105430),
            name: 'conversationId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5234436948258568314),
            name: 'creationDateTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4957151726265517651),
            name: 'updatedOn',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 2422556700063552013),
      name: 'ChatModel',
      lastPropertyId: const obx_int.IdUid(14, 4367394056815812364),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3654237213325127774),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5786417220530845290),
            name: 'messageId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2924708325743921009),
            name: 'message',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6737980322061693743),
            name: 'isMe',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 966723169252751815),
            name: 'isMarkdown',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6928698377949579368),
            name: 'isRagPrompt',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7525417160286885013),
            name: 'links',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3648569162449112884),
            name: 'isImage',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4439103868828274172),
            name: 'imagePath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 8946078743565357765),
            name: 'creationDatetime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 774859386423358670),
            name: 'dbLawDetails',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 8562293830382143819),
            name: 'conversationId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 4367394056815812364),
            name: 'userEmail',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 7207905970189456835),
      name: 'LawDetails',
      lastPropertyId: const obx_int.IdUid(4, 2352242307122053183),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 548156628691488181),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4709168785408132580),
            name: 'section',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7121689557228540795),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2352242307122053183),
            name: 'description',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 7207905970189456835),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [7651475978595634390],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        5112037003115110833,
        4628981211246971858,
        264250899610491312,
        4401977269549504008,
        1405494656955405885,
        4350984861961746031,
        2512421971782633337,
        4034882118297069838,
        296720506190981192,
        330234904234964434,
        3126683863710832313
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    ConversationModel: obx_int.EntityDefinition<ConversationModel>(
        model: _entities[0],
        toOneRelations: (ConversationModel object) => [],
        toManyRelations: (ConversationModel object) => {},
        getId: (ConversationModel object) => object.id,
        setId: (ConversationModel object, int id) {
          object.id = id;
        },
        objectToFB: (ConversationModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final conversationIdOffset = fbb.writeString(object.conversationId);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, conversationIdOffset);
          fbb.addInt64(3, object.creationDateTime.millisecondsSinceEpoch);
          fbb.addInt64(4, object.updatedOn.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final conversationIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final creationDateTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final updatedOnParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final object = ConversationModel(
              name: nameParam,
              conversationId: conversationIdParam,
              creationDateTime: creationDateTimeParam,
              updatedOn: updatedOnParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    ChatModel: obx_int.EntityDefinition<ChatModel>(
        model: _entities[1],
        toOneRelations: (ChatModel object) => [],
        toManyRelations: (ChatModel object) => {},
        getId: (ChatModel object) => object.id,
        setId: (ChatModel object, int id) {
          object.id = id;
        },
        objectToFB: (ChatModel object, fb.Builder fbb) {
          final messageIdOffset = fbb.writeString(object.messageId);
          final messageOffset = fbb.writeString(object.message);
          final linksOffset = fbb.writeList(
              object.links.map(fbb.writeString).toList(growable: false));
          final imagePathOffset = object.imagePath == null
              ? null
              : fbb.writeString(object.imagePath!);
          final dbLawDetailsOffset = fbb.writeString(object.dbLawDetails);
          final conversationIdOffset = fbb.writeString(object.conversationId);
          final userEmailOffset = fbb.writeString(object.userEmail);
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, messageIdOffset);
          fbb.addOffset(2, messageOffset);
          fbb.addBool(3, object.isMe);
          fbb.addBool(4, object.isMarkdown);
          fbb.addBool(5, object.isRagPrompt);
          fbb.addOffset(6, linksOffset);
          fbb.addBool(7, object.isImage);
          fbb.addOffset(8, imagePathOffset);
          fbb.addInt64(9, object.creationDatetime.millisecondsSinceEpoch);
          fbb.addOffset(11, dbLawDetailsOffset);
          fbb.addOffset(12, conversationIdOffset);
          fbb.addOffset(13, userEmailOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final userEmailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 30, '');
          final messageIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final messageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final isMeParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final isMarkdownParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final isRagPromptParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final linksParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 16, []);
          final isImageParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final imagePathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final creationDatetimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0));
          final conversationIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 28, '');
          final object = ChatModel(
              userEmail: userEmailParam,
              messageId: messageIdParam,
              message: messageParam,
              isMe: isMeParam,
              isMarkdown: isMarkdownParam,
              isRagPrompt: isRagPromptParam,
              links: linksParam,
              isImage: isImageParam,
              imagePath: imagePathParam,
              creationDatetime: creationDatetimeParam,
              conversationId: conversationIdParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..dbLawDetails = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 26, '');

          return object;
        }),
    LawDetails: obx_int.EntityDefinition<LawDetails>(
        model: _entities[2],
        toOneRelations: (LawDetails object) => [],
        toManyRelations: (LawDetails object) => {},
        getId: (LawDetails object) => object.id,
        setId: (LawDetails object, int id) {
          object.id = id;
        },
        objectToFB: (LawDetails object, fb.Builder fbb) {
          final sectionOffset = fbb.writeString(object.section);
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, sectionOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, descriptionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final sectionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final object = LawDetails(
              section: sectionParam,
              name: nameParam,
              description: descriptionParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ConversationModel] entity fields to define ObjectBox queries.
class ConversationModel_ {
  /// see [ConversationModel.id]
  static final id =
      obx.QueryIntegerProperty<ConversationModel>(_entities[0].properties[0]);

  /// see [ConversationModel.name]
  static final name =
      obx.QueryStringProperty<ConversationModel>(_entities[0].properties[1]);

  /// see [ConversationModel.conversationId]
  static final conversationId =
      obx.QueryStringProperty<ConversationModel>(_entities[0].properties[2]);

  /// see [ConversationModel.creationDateTime]
  static final creationDateTime =
      obx.QueryDateProperty<ConversationModel>(_entities[0].properties[3]);

  /// see [ConversationModel.updatedOn]
  static final updatedOn =
      obx.QueryDateProperty<ConversationModel>(_entities[0].properties[4]);
}

/// [ChatModel] entity fields to define ObjectBox queries.
class ChatModel_ {
  /// see [ChatModel.id]
  static final id =
      obx.QueryIntegerProperty<ChatModel>(_entities[1].properties[0]);

  /// see [ChatModel.messageId]
  static final messageId =
      obx.QueryStringProperty<ChatModel>(_entities[1].properties[1]);

  /// see [ChatModel.message]
  static final message =
      obx.QueryStringProperty<ChatModel>(_entities[1].properties[2]);

  /// see [ChatModel.isMe]
  static final isMe =
      obx.QueryBooleanProperty<ChatModel>(_entities[1].properties[3]);

  /// see [ChatModel.isMarkdown]
  static final isMarkdown =
      obx.QueryBooleanProperty<ChatModel>(_entities[1].properties[4]);

  /// see [ChatModel.isRagPrompt]
  static final isRagPrompt =
      obx.QueryBooleanProperty<ChatModel>(_entities[1].properties[5]);

  /// see [ChatModel.links]
  static final links =
      obx.QueryStringVectorProperty<ChatModel>(_entities[1].properties[6]);

  /// see [ChatModel.isImage]
  static final isImage =
      obx.QueryBooleanProperty<ChatModel>(_entities[1].properties[7]);

  /// see [ChatModel.imagePath]
  static final imagePath =
      obx.QueryStringProperty<ChatModel>(_entities[1].properties[8]);

  /// see [ChatModel.creationDatetime]
  static final creationDatetime =
      obx.QueryDateProperty<ChatModel>(_entities[1].properties[9]);

  /// see [ChatModel.dbLawDetails]
  static final dbLawDetails =
      obx.QueryStringProperty<ChatModel>(_entities[1].properties[10]);

  /// see [ChatModel.conversationId]
  static final conversationId =
      obx.QueryStringProperty<ChatModel>(_entities[1].properties[11]);

  /// see [ChatModel.userEmail]
  static final userEmail =
      obx.QueryStringProperty<ChatModel>(_entities[1].properties[12]);
}

/// [LawDetails] entity fields to define ObjectBox queries.
class LawDetails_ {
  /// see [LawDetails.id]
  static final id =
      obx.QueryIntegerProperty<LawDetails>(_entities[2].properties[0]);

  /// see [LawDetails.section]
  static final section =
      obx.QueryStringProperty<LawDetails>(_entities[2].properties[1]);

  /// see [LawDetails.name]
  static final name =
      obx.QueryStringProperty<LawDetails>(_entities[2].properties[2]);

  /// see [LawDetails.description]
  static final description =
      obx.QueryStringProperty<LawDetails>(_entities[2].properties[3]);
}
